Bayesian analysis#
y<- c(4,7,10,6,7,16,11,12,15,4,8,6,6,17,9,8,10,11,6,10,11,6)#
year<- seq(1989, 2010, 1)#
n<- length(y)#
#
# prior#
a1<- 0.5#
a2<- 0.5#
b1<- 0.01#
b2<- 0.01#
#
par(mfrow=c(3,1))#
plot(year, y, "l", xlab="year", ylab="count")#
#
log_gamma<- function(n){#
	if(!(n%%1)){#
		output<- 0#
		for(i in 1:(n-1)){#
			output<- output+log(i)#
		}#
		return(output)#
	}#
	else{#
		n<- n-0.5#
		output<- 0#
		for(i in 1:n){#
			output<- output+log(i)#
		}#
		output<- output+0.5*log(pi)+log(choose(n-0.5, n))#
		return(output)	#
	}#
}#
#
log_q<- vector("numeric", n)#
q<- vector("numeric", n)#
for(m in 1:n){#
	s1<- sum(y[1:m])#
	s2<- sum(y)-s1#
	log_q[m]<- log_gamma(s1+a1)-(s1+a1)*log(m+b1)+log_gamma(s2+a2)-(s2+a2)*log(n-m+b2)#
	q[m]<- exp(log_q[m])#
}#
q<- q/sum(q)#
barplot(q, names=1989:2010)#
#
B<- 5000#
warm<- 500#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)
n
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(m in 1:n){#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		m_prob[m]<- (theta1/theta2)^s1*exp(m*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	m_cum<- cumsum(m_prob)#
	r<- runif(1)#
	m<- min(which(m_cum > r))#
	return(m)#
}
for(b in 1:B){#
	for(i in 1:warm){#
		if(i == 1){m<- sample(1:n, 1)}#
		else{m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}#
hist(M, 22)
B<- 5000#
warm<- 500#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)#
#
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(m in 1:n){#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		m_prob[m]<- (theta1/theta2)^s1*exp(m*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	m_cum<- cumsum(m_prob)#
	r<- runif(1)#
	m<- min(which(m_cum >= r))#
	return(m)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		if(i == 1){m<- sample(1:n, 1)}#
		else{m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}#
hist(M, 22)#
#
quantile(Theta1, c(0.1, 0.9))#
quantile(Theta2, c(0.1, 0.9))
m_cum
B<- 5000#
warm<- 500#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)#
#
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(m in 1:n){#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		m_prob[m]<- (theta1/theta2)^s1*exp(m*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	m_cum<- cumsum(m_prob)#
	r<- runif(1)#
	m<- min(which(m_cum >= r))#
	return(m_cum)#
}
m
m_cum
B<- 5000#
warm<- 500#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)#
#
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(m in 1:n){#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		m_prob[m]<- (theta1/theta2)^s1*exp(m*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	m_cum<- cumsum(m_prob)#
	r<- runif(1)#
	m<- min(which(m_cum >= r))#
	return(m_cum)#
}
for(b in 1:B){#
	for(i in 1:warm){#
		if(i == 1){m<- sample(1:n, 1)}#
		else{m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}#
hist(M, 22)
warnings()
M
Theta1
sample(1:n,1)
1~=1
1!=1
B<- 5000#
warm<- 500#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)#
#
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(m in 1:n){#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		m_prob[m]<- (theta1/theta2)^s1*exp(m*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	m_cum<- cumsum(m_prob)#
	r<- runif(1)#
	m<- min(which(m_cum >= r))#
	return(m)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		if(i == 1){m<- sample(1:n, 1)}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}#
hist(M, 22)
1:500
1:5000
y
B<- 1000#
warm<- 200#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)#
#
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(m in 1:n){#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		m_prob[m]<- (theta1/theta2)^s1*exp(m*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	m_cum<- cumsum(m_prob)#
	r<- runif(1)#
	m<- min(which(m_cum >= r))#
	return(m)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		if(i == 1){m<- sample(1:n, 1)}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}
y<- c(4,7,10,6,7,16,11,12,15,4,8,6,6,17,9,8,10,11,6,10,11,6)#
year<- seq(1989, 2010, 1)#
n<- length(y)#
#
# prior#
a1<- 0.5#
a2<- 0.5#
b1<- 0.01#
b2<- 0.01#
#
par(mfrow=c(3,1))#
plot(year, y, "l", xlab="year", ylab="count")#
#
log_gamma<- function(n){#
	if(!(n%%1)){#
		output<- 0#
		for(i in 1:(n-1)){#
			output<- output+log(i)#
		}#
		return(output)#
	}#
	else{#
		n<- n-0.5#
		output<- 0#
		for(i in 1:n){#
			output<- output+log(i)#
		}#
		output<- output+0.5*log(pi)+log(choose(n-0.5, n))#
		return(output)	#
	}#
}#
#
log_q<- vector("numeric", n)#
q<- vector("numeric", n)#
for(m in 1:n){#
	s1<- sum(y[1:m])#
	s2<- sum(y)-s1#
	log_q[m]<- log_gamma(s1+a1)-(s1+a1)*log(m+b1)+log_gamma(s2+a2)-(s2+a2)*log(n-m+b2)#
	q[m]<- exp(log_q[m])#
}#
q<- q/sum(q)#
barplot(q, names=1989:2010)#
#
B<- 1000#
warm<- 200#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)#
#
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(m in 1:n){#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		m_prob[m]<- (theta1/theta2)^s1*exp(m*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	m_cum<- cumsum(m_prob)#
	r<- runif(1)#
	m<- min(which(m_cum >= r))#
	return(m)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		if(i == 1){m<- sample(1:n, 1)}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}#
hist(M, 22)
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(m in 1:n){#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		m_prob[m]<- (theta1/theta2)^s1*exp(m*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	m_cum<- cumsum(m_prob)#
	r<- runif(1)#
	m<- min(which(m_cum >= r))#
	return(m_cum)#
}
m
m_posterior(1,1)
m_posterior(1,1)>=0
m_posterior(1,1)>=1
B<- 1000#
warm<- 200#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)#
#
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(m in 1:n){#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		m_prob[m]<- (theta1/theta2)^s1*exp(m*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	m_cum<- cumsum(m_prob)#
	r<- runif(1)#
	m<- min(which(m_cum >= r))#
	return(m)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		if(i == 1){m<- sample(1:n, 1)}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}
runif(1)
m_posterior(1,3)
y<- c(4,7,10,6,7,16,11,12,15,4,8,6,6,17,9,8,10,11,6,10,11,6)#
year<- seq(1989, 2010, 1)#
n<- length(y)#
#
# prior#
a1<- 0.5#
a2<- 0.5#
b1<- 0.01#
b2<- 0.01#
#
par(mfrow=c(3,1))#
plot(year, y, "l", xlab="year", ylab="count")#
#
log_gamma<- function(n){#
	if(!(n%%1)){#
		output<- 0#
		for(i in 1:(n-1)){#
			output<- output+log(i)#
		}#
		return(output)#
	}#
	else{#
		n<- n-0.5#
		output<- 0#
		for(i in 1:n){#
			output<- output+log(i)#
		}#
		output<- output+0.5*log(pi)+log(choose(n-0.5, n))#
		return(output)	#
	}#
}#
#
log_q<- vector("numeric", n)#
q<- vector("numeric", n)#
for(m in 1:n){#
	s1<- sum(y[1:m])#
	s2<- sum(y)-s1#
	log_q[m]<- log_gamma(s1+a1)-(s1+a1)*log(m+b1)+log_gamma(s2+a2)-(s2+a2)*log(n-m+b2)#
	q[m]<- exp(log_q[m])#
}#
q<- q/sum(q)#
barplot(q, names=1989:2010)#
#
B<- 1000#
warm<- 200#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)#
#
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(m in 1:n){#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		m_prob[m]<- (theta1/theta2)^s1*exp(m*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	m_cum<- cumsum(m_prob)#
	r<- runif(1)#
	m<- min(which(m_cum >= r))#
	return(m)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		if(i == 1){m<- sample(1:n, 1)}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}
for(i in 1:warm){#
		if(i == 1){m<- sample(1:n, 1)}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}
m
for(b in 1:B){#
	m<- 0#
	for(i in 1:warm){#
		if(i == 1){m<- sample(1:n, 1)}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}
m_cum
y<- c(4,7,10,6,7,16,11,12,15,4,8,6,6,17,9,8,10,11,6,10,11,6)#
year<- seq(1989, 2010, 1)#
n<- length(y)#
#
# prior#
a1<- 0.5#
a2<- 0.5#
b1<- 0.01#
b2<- 0.01#
#
par(mfrow=c(3,1))#
plot(year, y, "l", xlab="year", ylab="count")#
#
log_gamma<- function(n){#
	if(!(n%%1)){#
		output<- 0#
		for(i in 1:(n-1)){#
			output<- output+log(i)#
		}#
		return(output)#
	}#
	else{#
		n<- n-0.5#
		output<- 0#
		for(i in 1:n){#
			output<- output+log(i)#
		}#
		output<- output+0.5*log(pi)+log(choose(n-0.5, n))#
		return(output)	#
	}#
}#
#
log_q<- vector("numeric", n)#
q<- vector("numeric", n)#
for(m in 1:n){#
	s1<- sum(y[1:m])#
	s2<- sum(y)-s1#
	log_q[m]<- log_gamma(s1+a1)-(s1+a1)*log(m+b1)+log_gamma(s2+a2)-(s2+a2)*log(n-m+b2)#
	q[m]<- exp(log_q[m])#
}#
q<- q/sum(q)#
barplot(q, names=1989:2010)#
#
B<- 1000#
warm<- 200#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)#
#
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(m in 1:n){#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		m_prob[m]<- (theta1/theta2)^s1*exp(m*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	m_cum<- cumsum(m_prob)#
	r<- runif(1)#
	output<- min(which(m_cum >= r))#
	return(output)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		if(i == 1){m<- sample(1:n, 1)}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}
m_cum
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(m in 1:n){#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		m_prob[m]<- (theta1/theta2)^s1*exp(m*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	m_cum<- cumsum(m_prob)#
	r<- runif(1)#
	output<- min(which(m_cum >= r))#
	return(m_cum)#
}
m_posterior(0.1,0.3)
m_posterior(0.1,0.6)
m_posterior(0.3,0.6)
m_posterior(0.5,0.6)
m_posterior(0.5,0.6)>= runif(1)
which(m_posterior(0.5,0.6)>= runif(1))
min(which(m_posterior(0.5,0.6)>= runif(1)))
min(which(m_posterior(0.5,0.6)>= 0.8))
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(m in 1:n){#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		m_prob[m]<- (theta1/theta2)^s1*exp(m*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	m_cum<- cumsum(m_prob)#
	r<- runif(1)#
	output<- min(which(m_cum >= r))#
	return(output)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		if(i == 1){m<- sample(1:n, 1)}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}
warning()
B<- 1000#
warm<- 200#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)#
#
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(m in 1:n){#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		m_prob[m]<- (theta1/theta2)^s1*exp(m*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	m_cum<- cumsum(m_prob)#
	r<- runif(1)#
	output<- min(which(m_cum > r))#
	return(output)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		if(i == 1){m<- sample(1:n, 1)}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}
a1<- 0.5#
a2<- 0.5#
b1<- 0.01#
b2<- 0.01#
#
par(mfrow=c(3,1))#
plot(year, y, "l", xlab="year", ylab="count")#
#
log_gamma<- function(n){#
	if(!(n%%1)){#
		output<- 0#
		for(i in 1:(n-1)){#
			output<- output+log(i)#
		}#
		return(output)#
	}#
	else{#
		n<- n-0.5#
		output<- 0#
		for(i in 1:n){#
			output<- output+log(i)#
		}#
		output<- output+0.5*log(pi)+log(choose(n-0.5, n))#
		return(output)	#
	}#
}#
#
log_q<- vector("numeric", n)#
q<- vector("numeric", n)#
for(m in 1:n){#
	s1<- sum(y[1:m])#
	s2<- sum(y)-s1#
	log_q[m]<- log_gamma(s1+a1)-(s1+a1)*log(m+b1)+log_gamma(s2+a2)-(s2+a2)*log(n-m+b2)#
	q[m]<- exp(log_q[m])#
}#
q<- q/sum(q)#
barplot(q, names=1989:2010)#
#
B<- 1000#
warm<- 200#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)#
#
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(m in 1:n){#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		m_prob[m]<- (theta1/theta2)^s1*exp(m*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	m_cum<- cumsum(m_prob)#
	r<- runif(1)#
	output<- min(which(m_cum >= r))#
	return(output)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		if(i == 1){m<- sample(1:n, 1)}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}
y<- c(4,7,10,6,7,16,11,12,15,4,8,6,6,17,9,8,10,11,6,10,11,6)#
year<- seq(1989, 2010, 1)#
n<- length(y)#
#
# prior#
a1<- 0.5#
a2<- 0.5#
b1<- 0.01#
b2<- 0.01#
#
par(mfrow=c(3,1))#
plot(year, y, "l", xlab="year", ylab="count")#
#
log_gamma<- function(n){#
	if(!(n%%1)){#
		output<- 0#
		for(i in 1:(n-1)){#
			output<- output+log(i)#
		}#
		return(output)#
	}#
	else{#
		n<- n-0.5#
		output<- 0#
		for(i in 1:n){#
			output<- output+log(i)#
		}#
		output<- output+0.5*log(pi)+log(choose(n-0.5, n))#
		return(output)	#
	}#
}#
#
log_q<- vector("numeric", n)#
q<- vector("numeric", n)#
for(m in 1:n){#
	s1<- sum(y[1:m])#
	s2<- sum(y)-s1#
	log_q[m]<- log_gamma(s1+a1)-(s1+a1)*log(m+b1)+log_gamma(s2+a2)-(s2+a2)*log(n-m+b2)#
	q[m]<- exp(log_q[m])#
}#
q<- q/sum(q)#
barplot(q, names=1989:2010)#
#
B<- 1000#
warm<- 200#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)#
#
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(m in 1:n){#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		m_prob[m]<- (theta1/theta2)^s1*exp(m*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	m_cum<- cumsum(m_prob)#
	r<- runif(1)#
	output<- min(which(m_cum >= r))#
	return(output)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		if(i == 1){m<- sample(1:n, 1)}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}
B<- 1000#
warm<- 200#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)#
#
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(m in 1:n){#
		s1<- sum(y[1:m])#
		m_prob[m]<- (theta1/theta2)^s1*exp(m*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	m_cum<- cumsum(m_prob)#
	r<- runif(1)#
	output<- min(which(m_cum >= r))#
	return(output)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		if(i == 1){m<- sample(1:n, 1)}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}
m
theta_1
theta1
theta2
m_posterior(theta1, theta2)
for(m in 1:n){#
		s1<- sum(y[1:m])#
		m_prob[m]<- (theta1/theta2)^s1*exp(m*(theta2-theta1))#
	}
m_prob<- vector("numeric", n)#
	for(m in 1:n){#
		s1<- sum(y[1:m])#
		m_prob[m]<- (theta1/theta2)^s1*exp(m*(theta2-theta1))#
	}
m_prob
m_prob<- m_prob/sum(m_prob)
m_prob
a1
a2
b1
b2
theta1<-0
theta2<-0
B<- 1000#
warm<- 200#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)#
#
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(m in 1:n){#
		s1<- sum(y[1:m])#
		m_prob[m]<- (theta1/theta2)^s1*exp(m*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	m_cum<- cumsum(m_prob)#
	r<- runif(1)#
	output<- min(which(m_cum >= r))#
	return(output)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		if(i == 1){m<- sample(1:n, 1)}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}
m
theta1<- rgamma(1, a1+s1, m+b1)
theta1
theta2<- rgamma(1, a2+s2, n-m+b2)
theta2
B<- 1000#
warm<- 200#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)#
#
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(m in 1:n){#
		s1<- sum(y[1:m])#
		m_prob[m]<- (theta1/theta2)^s1*exp(m*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	# m_cum<- cumsum(m_prob)#
	# r<- runif(1)#
	# output<- min(which(m_cum >= r))#
	output<- sample(1:n, 1, prob = m_prob)#
	return(output)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		if(i == 1){m<- sample(1:n, 1)}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}
prob
B<- 1000#
warm<- 200#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)#
#
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(m in 1:n){#
		s1<- sum(y[1:m])#
		m_prob[m]<- (theta1/theta2)^s1*exp(m*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	# m_cum<- cumsum(m_prob)#
	# r<- runif(1)#
	# output<- min(which(m_cum >= r))#
	output<- sample(1:n, 1, prob = m_prob)#
	return(output)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		if(i == 1){m<- sample(1:n, 1)}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, scale=m+b1)#
		theta2<- rgamma(1, a2+s2, scale=n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}#
hist(M, 22)#
#
quantile(Theta1, c(0.1, 0.9))#
quantile(Theta2, c(0.1, 0.9))
B<- 1000#
warm<- 200#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)#
#
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(m in 1:n){#
		s1<- sum(y[1:m])#
		m_prob[m]<- (theta1/theta2)^s1*exp(m*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	# m_cum<- cumsum(m_prob)#
	# r<- runif(1)#
	# output<- min(which(m_cum >= r))#
	output<- sample(1:n, 1, prob = m_prob)#
	return(output)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		if(i == 1){m<- sample(1:n, 1)}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}
B<- 1000#
warm<- 200#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)#
#
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(j in 1:n){#
		s1<- sum(y[1:j])#
		m_prob[j]<- (theta1/theta2)^s1*exp(j*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	# m_cum<- cumsum(m_prob)#
	# r<- runif(1)#
	# output<- min(which(m_cum >= r))#
	output<- sample(1:n, 1, prob = m_prob)#
	return(output)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		if(i == 1){m<- sample(1:n, 1)}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}#
hist(M, 22)
for(b in 1:B){#
	for(i in 1:warm){#
		# if(i == 1){m<- sample(1:n, 1)}#
		if(i == 1){m<- 14}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}
m
n
B<- 1000#
warm<- 200#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)#
#
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(j in 1:n){#
		s1<- sum(y[1:j])#
		m_prob[j]<- (theta1/theta2)^s1*exp(j*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	# m_cum<- cumsum(m_prob)#
	# r<- runif(1)#
	# output<- min(which(m_cum >= r))#
	output<- sample(1:n, 1, prob = m_prob)#
	return(output)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		# if(i == 1){m<- sample(1:n, 1)}#
		if(i == 1){m<- 14}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}#
hist(M, 22)
theta1
theta2
B<- 1000#
warm<- 200#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)#
#
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(j in 1:n){#
		s1<- sum(y[1:j])#
		m_prob[j]<- (theta1/theta2)^s1*exp(j*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	# m_cum<- cumsum(m_prob)#
	# r<- runif(1)#
	# output<- min(which(m_cum >= r))#
	output<- sample(1:n, 1, prob = m_prob)#
	return(output)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		# if(i == 1){m<- sample(1:n, 1)}#
		if(i == 1){m<- 14}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, 1/(m+b1))#
		theta2<- rgamma(1, a2+s2, 1/(n-m+b2))#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2
}
theta1
theta2
gibbs sampler#
m.post.dist<-function(t1, t2, X) {#
n<-length(X)#
post.dist<-rep(0,n)#
for (i in 1:n)#
post.dist[i]<-exp(-(t1-t2)*i)*(t1/t2)^sum(X[1:i])#
post.dist<-post.dist/sum(post.dist)#
return(post.dist)#
}#
B<-1000#
nchain<-200#
M<-NULL#
T1<-NULL#
T2<-NULL#
for (b in 1:B)#
{#
theta1.post<-rep(0, nchain)#
theta2.post<-rep(0, nchain)#
m.post<-rep(0, nchain)#
theta1<-rgamma(1, a1, b1)#
theta2<-rgamma(1, a2, b2)#
m<-sample(1:n, 1)#
for (s in 1:nchain) {#
theta1.post[s]<-theta1<-rgamma(1, a1+sum(y[1:m]), b1+m)#
theta2.post[s]<-theta2<-rgamma(1, a2+sum(y)-sum(y[1:m]), b2+n-m)#
prob0<-m.post.dist(theta1, theta2, y)#
m.post[s]<-m<-sample(1:n, 1, prob=prob0)#
}#
M[b]<-m#
T1[b]<-theta1#
T2[b]<-theta2#
}
B<- 1000#
warm<- 200#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)#
#
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(j in 1:n){#
		s1<- sum(y[1:j])#
		m_prob[j]<- (theta1/theta2)^s1*exp(j*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	# m_cum<- cumsum(m_prob)#
	# r<- runif(1)#
	# output<- min(which(m_cum >= r))#
	output<- sample(1:n, 1, prob = m_prob)#
	return(output)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		# if(i == 1){m<- sample(1:n, 1)}#
		if(i == 1){m<- 14}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}#
hist(M, 22)
rand.seed(1)
y<- c(4,7,10,6,7,16,11,12,15,4,8,6,6,17,9,8,10,11,6,10,11,6)#
year<- seq(1989, 2010, 1)#
n<- length(y)#
#
# prior#
a1<- 0.5#
a2<- 0.5#
b1<- 0.01#
b2<- 0.01#
#
par(mfrow=c(3,1))#
plot(year, y, "l", xlab="year", ylab="count")#
#
log_gamma<- function(n){#
	if(!(n%%1)){#
		output<- 0#
		for(i in 1:(n-1)){#
			output<- output+log(i)#
		}#
		return(output)#
	}#
	else{#
		n<- n-0.5#
		output<- 0#
		for(i in 1:n){#
			output<- output+log(i)#
		}#
		output<- output+0.5*log(pi)+log(choose(n-0.5, n))#
		return(output)	#
	}#
}#
#
log_q<- vector("numeric", n)#
q<- vector("numeric", n)#
for(m in 1:n){#
	s1<- sum(y[1:m])#
	s2<- sum(y)-s1#
	log_q[m]<- log_gamma(s1+a1)-(s1+a1)*log(m+b1)+log_gamma(s2+a2)-(s2+a2)*log(n-m+b2)#
	q[m]<- exp(log_q[m])#
}#
q<- q/sum(q)#
barplot(q, names=1989:2010)#
#
set.seed(3)#
#
B<- 1000#
warm<- 200#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)#
#
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(j in 1:n){#
		s1<- sum(y[1:j])#
		m_prob[j]<- (theta1/theta2)^s1*exp(j*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	# m_cum<- cumsum(m_prob)#
	# r<- runif(1)#
	# output<- min(which(m_cum >= r))#
	output<- sample(1:n, 1, prob = m_prob)#
	return(output)#
}
for(b in 1:B){#
	for(i in 1:warm){#
		# if(i == 1){m<- sample(1:n, 1)}#
		if(i == 1){m<- 14}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}
for(b in 1:B){#
	for(i in 1:warm){#
		if(i == 1){m<- sample(1:n, 1)}#
		# if(i == 1){m<- 14}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}#
hist(M, 22)
B<- 1000#
warm<- 200#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)#
#
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(j in 1:n){#
		s1<- sum(y[1:j])#
		s2<- sum(y)-s1#
		m_prob[j]<- theta1^s1*theta2^s2*exp(j*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	# m_cum<- cumsum(m_prob)#
	# r<- runif(1)#
	# output<- min(which(m_cum >= r))#
	output<- sample(1:n, 1, prob = m_prob)#
	return(output)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		if(i == 1){m<- sample(1:n, 1)}#
		# if(i == 1){m<- 14}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}
m_prob<- vector("numeric", n)#
	for(j in 1:n){#
		s1<- sum(y[1:j])#
		s2<- sum(y)-s1#
		m_prob[j]<- theta1^s1*theta2^s2*exp(j*(theta2-theta1))#
	}
m_prob
m<14
m<-14
s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)
theta1
theta2
for(j in 1:n){#
		s1<- sum(y[1:j])#
		s2<- sum(y)-s1#
		m_prob[j]<- theta1^s1*theta2^s2*exp(j*(theta2-theta1))#
	}
m_prob<- m_prob/sum(m_prob)
m_prob
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(j in 1:n){#
		s1<- sum(y[1:j])#
		s2<- sum(y)-s1#
		m_prob[j]<- theta1^s1*theta2^s2*exp(j*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	# m_cum<- cumsum(m_prob)#
	# r<- runif(1)#
	# output<- min(which(m_cum >= r))#
	output<- sample(1:n, 1, prob = m_prob)#
	return(output)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		if(i == 1){m<- sample(1:n, 1)}#
		# if(i == 1){m<- 14}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}
m<-14
s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)
for(i in 1:warm){#
		if(i == 1){m<- sample(1:n, 1)}#
		# if(i == 1){m<- 14}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}
m
theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)
theta1
theta2
m_posterior(theta1, theta2)
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(j in 1:n){#
		s1<- sum(y[1:j])#
		s2<- sum(y)-s1#
		m_prob[j]<- theta1^s1*theta2^s2*exp(j*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	# m_cum<- cumsum(m_prob)#
	# r<- runif(1)#
	# output<- min(which(m_cum >= r))#
	output<- sample(1:n, 1, prob = m_prob)#
	return(output)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		if(i == 1){m<- sample(1:n, 1)}#
		# if(i == 1){m<- 14}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}
for(i in 1:warm){#
		print(i)#
		if(i == 1){m<- sample(1:n, 1)}#
		# if(i == 1){m<- 14}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}
for(b in 1:B){#
	for(i in 1:warm){#
		print(i)#
		if(i == 1){m<- sample(1:n, 1)}#
		# if(i == 1){m<- 14}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}
m_prob<- vector("numeric", n)#
	for(j in 1:n){#
		s1<- sum(y[1:j])#
		s2<- sum(y)-s1#
		m_prob[j]<- theta1^s1*theta2^s2*exp(j*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)
m_prob
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(j in 1:n){#
		s1<- sum(y[1:j])#
		s2<- sum(y)-s1#
		m_prob[j]<- theta1^s1*theta2^s2*exp(j*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	# m_cum<- cumsum(m_prob)#
	# r<- runif(1)#
	# output<- min(which(m_cum >= r))#
	m_prob[is.na(m_prob)]<- 0.01#
	output<- sample(1:n, 1, prob = m_prob)#
	return(output)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		print(i)#
		if(i == 1){m<- sample(1:n, 1)}#
		# if(i == 1){m<- 14}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}
hist(M, 22)
quantile(Theta1, c(0.1, 0.9))#
quantile(Theta2, c(0.1, 0.9))
y<- c(4,7,10,6,7,16,11,12,15,4,8,6,6,17,9,8,10,11,6,10,11,6)#
year<- seq(1989, 2010, 1)#
n<- length(y)#
#
# prior#
a1<- 0.5#
a2<- 0.5#
b1<- 0.01#
b2<- 0.01#
#
par(mfrow=c(3,1))#
plot(year, y, "l", xlab="year", ylab="count")#
#
log_gamma<- function(n){#
	if(!(n%%1)){#
		output<- 0#
		for(i in 1:(n-1)){#
			output<- output+log(i)#
		}#
		return(output)#
	}#
	else{#
		n<- n-0.5#
		output<- 0#
		for(i in 1:n){#
			output<- output+log(i)#
		}#
		output<- output+0.5*log(pi)+log(choose(n-0.5, n))#
		return(output)	#
	}#
}#
#
log_q<- vector("numeric", n)#
q<- vector("numeric", n)#
for(m in 1:n){#
	s1<- sum(y[1:m])#
	s2<- sum(y)-s1#
	log_q[m]<- log_gamma(s1+a1)-(s1+a1)*log(m+b1)+log_gamma(s2+a2)-(s2+a2)*log(n-m+b2)#
	q[m]<- exp(log_q[m])#
}#
q<- q/sum(q)#
barplot(q, names=1989:2010)#
#
B<- 1000#
warm<- 200#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)#
#
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(j in 1:n){#
		s1<- sum(y[1:j])#
		s2<- sum(y)-s1#
		m_prob[j]<- theta1^s1*theta2^s2*exp(j*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	# m_cum<- cumsum(m_prob)#
	# r<- runif(1)#
	# output<- min(which(m_cum >= r))#
	m_prob[is.na(m_prob)]<- 0.001#
	output<- sample(1:n, 1, prob = m_prob)#
	return(output)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		# print(i)#
		if(i == 1){m<- sample(1:n, 1)}#
		# if(i == 1){m<- 14}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}#
hist(M, 22)#
#
quantile(Theta1, c(0.1, 0.9))#
quantile(Theta2, c(0.1, 0.9))
y<- c(4,7,10,6,7,16,11,12,15,4,8,6,6,17,9,8,10,11,6,10,11,6)#
year<- seq(1989, 2010, 1)#
n<- length(y)#
#
# prior#
a1<- 0.5#
a2<- 0.5#
b1<- 0.01#
b2<- 0.01#
#
par(mfrow=c(3,1))#
plot(year, y, "l", xlab="year", ylab="count")#
#
log_gamma<- function(n){#
	if(!(n%%1)){#
		output<- 0#
		for(i in 1:(n-1)){#
			output<- output+log(i)#
		}#
		return(output)#
	}#
	else{#
		n<- n-0.5#
		output<- 0#
		for(i in 1:n){#
			output<- output+log(i)#
		}#
		output<- output+0.5*log(pi)+log(choose(n-0.5, n))#
		return(output)	#
	}#
}#
#
log_q<- vector("numeric", n)#
q<- vector("numeric", n)#
for(m in 1:n){#
	s1<- sum(y[1:m])#
	s2<- sum(y)-s1#
	log_q[m]<- log_gamma(s1+a1)-(s1+a1)*log(m+b1)+log_gamma(s2+a2)-(s2+a2)*log(n-m+b2)#
	q[m]<- exp(log_q[m])#
}#
q<- q/sum(q)#
barplot(q, names=1989:2010)#
#
B<- 5000#
warm<- 500#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)#
#
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(j in 1:n){#
		s1<- sum(y[1:j])#
		s2<- sum(y)-s1#
		m_prob[j]<- theta1^s1*theta2^s2*exp(j*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	# m_cum<- cumsum(m_prob)#
	# r<- runif(1)#
	# output<- min(which(m_cum >= r))#
	m_prob[is.na(m_prob)]<- 0.001#
	output<- sample(1:n, 1, prob = m_prob)#
	return(output)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		# print(i)#
		if(i == 1){m<- sample(1:n, 1)}#
		# if(i == 1){m<- 14}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}#
hist(M, 22)#
#
quantile(Theta1, c(0.1, 0.9))#
quantile(Theta2, c(0.1, 0.9))
hist(Theta1)
par(mfrow=c(3,1))#
hist(Theta1)#
hist(Theta2)
Theta2
mean(Theta1)#
mean(Theta2)
median(Theta1)#
median(Theta2)
quantile(M, c(0.1, 0.9))#
mean(M)#
median(M)
hist(Theta2)
hist(Theta2, 22)
hist(Theta1, 22)
?histogram
?hist
hist(Theta2, 42)
hist(Theta2, 22)
par(mfrow=c(3,1))#
hist(Theta1, 22)#
hist(Theta2, 22)
par(mfrow=c(2,1))#
hist(Theta1, 22)#
hist(Theta2, 22)
hist(M, 23)
hist(M, 21)
par(mfrow=c(2,1))#
hist(Theta1, 23)#
hist(Theta2, 23)
par(mfrow=c(3,1))#
plot(year, y, "l", xlab="year", ylab="count")
barplot(q, names=1989:2010)
hist(M, 23)
y<- c(4,7,10,6,7,16,11,12,15,4,8,6,6,17,9,8,10,11,6,10,11,6)#
year<- seq(1989, 2010, 1)#
n<- length(y)#
#
# prior#
a1<- 0.5#
a2<- 0.5#
b1<- 0.01#
b2<- 0.01#
#
par(mfrow=c(3,1))#
plot(year, y, "l", xlab="year", ylab="count")#
#
log_gamma<- function(n){#
	if(!(n%%1)){#
		output<- 0#
		for(i in 1:(n-1)){#
			output<- output+log(i)#
		}#
		return(output)#
	}#
	else{#
		n<- n-0.5#
		output<- 0#
		for(i in 1:n){#
			output<- output+log(i)#
		}#
		output<- output+0.5*log(pi)+log(choose(n-0.5, n))#
		return(output)	#
	}#
}#
#
log_q<- vector("numeric", n)#
q<- vector("numeric", n)#
for(m in 1:n){#
	s1<- sum(y[1:m])#
	s2<- sum(y)-s1#
	log_q[m]<- log_gamma(s1+a1)-(s1+a1)*log(m+b1)+log_gamma(s2+a2)-(s2+a2)*log(n-m+b2)#
	q[m]<- exp(log_q[m])#
}#
q<- q/sum(q)#
barplot(q, names=1989:2010)#
#
B<- 1000#
warm<- 200#
M<- vector("numeric", B)#
Theta1<- vector("numeric", B)#
Theta2<<- vector("numeric", B)#
#
m_posterior<- function(theta1, theta2){#
	m_prob<- vector("numeric", n)#
	for(j in 1:n){#
		s1<- sum(y[1:j])#
		s2<- sum(y)-s1#
		m_prob[j]<- theta1^s1*theta2^s2*exp(j*(theta2-theta1))#
	}#
	m_prob<- m_prob/sum(m_prob)#
	# m_cum<- cumsum(m_prob)#
	# r<- runif(1)#
	# output<- min(which(m_cum >= r))#
	m_prob[is.na(m_prob)]<- 0.001#
	output<- sample(1:n, 1, prob = m_prob)#
	return(output)#
}#
#
for(b in 1:B){#
	for(i in 1:warm){#
		# print(i)#
		if(i == 1){m<- sample(1:n, 1)}#
		# if(i == 1){m<- 14}#
		if(i != 1){m<- m_posterior(theta1, theta2)}#
		s1<- sum(y[1:m])#
		s2<- sum(y)-s1#
		theta1<- rgamma(1, a1+s1, m+b1)#
		theta2<- rgamma(1, a2+s2, n-m+b2)#
	}#
	M[b]<- m#
	Theta1[b]<- theta1#
	Theta2[b]<- theta2#
}#
hist(M, 23)#
#
quantile(M, c(0.1, 0.9))#
mean(M)#
median(M)#
#
quantile(Theta1, c(0.1, 0.9))#
quantile(Theta2, c(0.1, 0.9))#
mean(Theta1)#
mean(Theta2)#
median(Theta1)#
median(Theta2)#
#
par(mfrow=c(2,1))#
hist(Theta1, 23)#
hist(Theta2, 23)
par(mfrow=c(3,1))
plot(year, y, "l", xlab="year", ylab="count")
barplot(q, names=1989:2010)
hist(M, 23)
table(M)
par(mfrow=c(2,1))
hist(Theta1, 23)
hist(Theta2, 100)
table(Theta2)
quantile(Theta1, c(0.1, 0.9))
mean(Theta1)
median(Theta1)
table(Theta1)
mode(Theta1)
mean(Theta1)
median(Theta1)
sort(table(Theta1))
sort(freq(Theta1))
sort(freqence(Theta1))
sort(freqency(Theta1))
table(Theta1)
quantile(Theta2, c(0.1, 0.9))
mean(Theta2)
median(Theta2)
change point detection #####
library(mcmcse)#
#
args <- commandArgs(TRUE)#
m<- as.numeric(args[1])	# number of change point#
#
raw<- read.table("2change-point.txt")#
y<- raw[,1]#
#
n<- length(y)	# sample size#
#
#prior information for updating P#
a<- 0.1*n/(m+1)-0.1#
b<- 0.1
m=1
n=20
a<- 0.1*n/(m+1)-0.1#
b<- 0.1
a
b
n=100
a<- 0.1*n/(m+1)-0.1#
b<- 0.1
a
b
a=1
write.table(a, "atest.txt",append=T)
b=2
write.table(b, "atest.txt",append=T)
m<-1
library(mcmcse)
raw<- read.table("change-point-2.txt", sep='')#
y<- raw[,1]#
n<- length(y)	# sample size#
## functions ###
# equation 6#
eq6<- function(t, k, P, mass){#
	if(k == 0){#
		output<- 0#
	}#
	else if(k == 1){#
		output<- P[1]*mass[t-1, 1]#
	}#
	else if(k > 1){#
		output<- (1-P[k-1])*mass[t-1, k-1] + P[k]*mass[t-1, k]#
	}#
	return(output)#
}#
## initial setups ###
# hyper parameters#
a<- round(0.1*n/(m+1)-0.1)#
b<- 0.1#
#
# transition matrix P#
P<- array(0.5, c(1, m+1))#
P[1, m+1]<- 1#
#
# latent variable S#
S<- array(m+1, c(1, n))#
for(t in 1:(m+1)){#
	S[t]<- t#
}#
#
# model parameters theta#
theta<- array(n/(m+1), c(1, m+1))#
#
comb<- c(P[-c(m+1)], S[2:(n-1)], theta)	# all combined parameters exclude P[m+1] = 1 & S[1] = 1 & S[n] = m+1#
iter<- 0	# iteration counts#
thresh<- 5000	# threshold for stopping rule
iter<- iter+1#
	P_cur<- P[iter, ]#
	theta_cur<- theta[iter, ]#
	S_cur<- S[iter, ]#
	# # update mass function#
	# mass<- array(0, c(n, m+1))#
	# mass[1, 1]<- 1#
	# for(t in 2:n){#
		# mass[t, 1]<- 1	# if k == 1 then k-1 == 0#
		# for(k in 2:(m+1)){#
			# if(mass[t, k-1] == 0){#
				# mass[t, k] = 0#
			# }#
			# else{#
			# mass[t, k]<- 1/(1+eq6(t, k-1, P_cur, mass)*ppois(y[t], theta_cur[k-1])/(eq6(t, k, P_cur, mass)*ppois(y[t], theta_cur[k])))#
			# }#
		# }#
		# mass[t,]<- mass[t,]/sum(mass[t,])#
	# }#
	# update S#
	S_cur[n]<- m+1#
	for(t in (n-1):2){#
		mass<- array(0, c(n, m+1))#
		mass[1, 1]<- 1#
		if(S_cur[t+1] > 1){#
			for(tt in 2:n){#
				for(k in (S_cur[t+1]-1):S_cur[t+1]){#
					mass[tt, k]<- 1/(1+eq6(tt, k-1, P_cur, mass)*ppois(y[tt], theta_cur[k-1])/(eq6(tt, k, P_cur, mass)*ppois(y[tt], theta_cur[k])))#
				}#
			}#
			prob<- c(prod(mass[t, S_cur[t+1]-1])*(1-prod(P_cur[S_cur[t+1]-1])), mass[t, S_cur[t+1]]*P_cur[S_cur[t+1]])#
			prob<- prob/sum(prob)	# probability for pick from S_cur[t+1]-1:S_cur[t+1]#
			S_cur[t]<- sample((S_cur[t+1]-1):S_cur[t+1], 1, prob = prob)#
		}#
		else{#
			S_cur[t]<- 1	#
		}#
	}
k
eq6(tt, k-1, P_cur, mass)
1+eq6(tt, k-1, P_cur, mass)*ppois(y[tt], theta_cur[k-1])/(eq6(tt, k, P_cur, mass)*ppois(y[tt], theta_cur[k]))
S_cur[t+!]
S_cur[t+1]
head(S_cur)
head(mass)
S_cur
eq6(tt, k, P_cur, mass)*ppois(y[tt], theta_cur[k]))
eq6(tt, k, P_cur, mass)
ppois(y[tt], theta_cur[k])
eq6(tt, k-1, P_cur, mass)*ppois(y[tt], theta_cur[k-1])/(eq6(tt, k, P_cur, mass)*ppois(y[tt], theta_cur[k]))
eq6(tt, k-1, P_cur, mass)*ppois(y[tt], theta_cur[k-1])
ppois(y[tt], theta_cur[k-1])
theta_cur[k-1]
S_cur[n]<- m+1#
	for(t in (n-1):2){#
		mass<- array(0, c(n, m+1))#
		mass[1, 1]<- 1#
		if(S_cur[t+1] > 1){#
			for(tt in 2:n){#
				for(k in (S_cur[t+1]-1):S_cur[t+1]){#
					mass[tt, k]<- 1/(1+eq6(tt, k-1, P_cur, mass)*prod(ppois(y[tt], theta_cur[k-1]))/(eq6(tt, k, P_cur, mass)*ppois(y[tt], theta_cur[k])))#
				}#
			}#
			prob<- c(prod(mass[t, S_cur[t+1]-1])*(1-prod(P_cur[S_cur[t+1]-1])), mass[t, S_cur[t+1]]*P_cur[S_cur[t+1]])#
			prob<- prob/sum(prob)	# probability for pick from S_cur[t+1]-1:S_cur[t+1]#
			S_cur[t]<- sample((S_cur[t+1]-1):S_cur[t+1], 1, prob = prob)#
		}#
		else{#
			S_cur[t]<- 1	#
		}#
	}
S_cur
S_cur[n]<- m+1#
	for(t in (n-1):2){#
		mass<- array(0, c(n, m+1))#
		mass[1, 1]<- 1#
		if(S_cur[t+1] > 1){#
			for(tt in 2:n){#
				for(k in (S_cur[t+1]-1):S_cur[t+1]){#
					mass[tt, k]<- 1/(1+eq6(tt, k-1, P_cur, mass)*prod(ppois(y[tt], theta_cur[k-1]))/(eq6(tt, k, P_cur, mass)*ppois(y[tt], theta_cur[k])))#
				}#
			}#
			prob<- c(prod(mass[t, S_cur[t+1]-1])*(1-prod(P_cur[S_cur[t+1]-1])), mass[t, S_cur[t+1]]*P_cur[S_cur[t+1]])#
			prob<- prob/sum(prob)	# probability for pick from S_cur[t+1]-1:S_cur[t+1]#
			S_cur[t]<- sample((S_cur[t+1]-1):S_cur[t+1], 1, prob = prob)#
		}#
		else{#
			S_cur[t]<- 1	#
		}#
	}
S_cur
S_cur[n]<- m+1#
	for(t in (n-1):2){#
		mass<- array(0, c(n, m+1))#
		mass[1, 1]<- 1#
		if(S_cur[t+1] > 1){#
			for(tt in 2:n){#
				for(k in (S_cur[t+1]-1):S_cur[t+1]){#
					mass[tt, k]<- 1/(1+eq6(tt, k-1, P_cur, mass)*prod(ppois(y[tt], theta_cur[k-1]))/(eq6(tt, k, P_cur, mass)*ppois(y[tt], theta_cur[k])))#
				}#
			}#
			prob<- c(prod(mass[t, S_cur[t+1]-1])*(1-prod(P_cur[S_cur[t+1]-1])), mass[t, S_cur[t+1]]*P_cur[S_cur[t+1]])#
			prob<- prob/sum(prob)	# probability for pick from S_cur[t+1]-1:S_cur[t+1]#
			S_cur[t]<- sample((S_cur[t+1]-1):S_cur[t+1], 1, prob = prob)#
		}#
		else{#
			S_cur[t]<- 1	#
		}#
	}
S_cur
prod(ppois(y[tt], theta_cur[k-1])
)
prod(P_cur[S_cur[t+1]-1])
P_cur[S_cur[t+1]-1]
prob
prod(mass[t, S_cur[t+1]-1])
(1-prod(P_cur[S_cur[t+1]-1]))
prod(mass[t, S_cur[t+1]-1])*(1-prod(P_cur[S_cur[t+1]-1]))
prob/sum(prob)
mass[t, S_cur[t+1]]*P_cur[S_cur[t+1]]
P_cur[S_cur[t+1]]
mass[t, S_cur[t+1]]
mass
t
S_cur[t+1] > 1
S_cur[t+1]-1
theta_cur[k-1]
prod(2)
prod(1)
prod(numeric(0))
1-numeric(0)
t<- n-1
S_cur[n]<- m+1
mass<- array(0, c(n, m+1))
if(S_cur[t+1] > 1){#
			mass[1, 1]<- 1#
			for(tt in 2:n){#
				for(k in (S_cur[t+1]-1):S_cur[t+1]){#
					mass[tt, k]<- 1/(1+eq6(tt, k-1, P_cur, mass)*prod(ppois(y[tt], theta_cur[k-1]))/(eq6(tt, k, P_cur, mass)*ppois(y[tt], theta_cur[k])))#
				}#
			}#
			prob<- c(prod(mass[t, S_cur[t+1]-1])*(1-prod(P_cur[S_cur[t+1]-1])), mass[t, S_cur[t+1]]*P_cur[S_cur[t+1]])#
			prob<- prob/sum(prob)	# probability for pick from S_cur[t+1]-1:S_cur[t+1]#
			S_cur[t]<- sample((S_cur[t+1]-1):S_cur[t+1], 1, prob = prob)#
		}#
		else{#
			S_cur[t]<- 1	#
		}
if(S_cur[t+1] > 1){#
			mass[1, 1]<- 1#
			for(tt in 2:n){#
				for(k in (S_cur[t+1]-1):S_cur[t+1]){#
					mass[tt, k]<- 1/(1+eq6(tt, k-1, P_cur, mass)*prod(ppois(y[tt], theta_cur[k-1]))/(eq6(tt, k, P_cur, mass)*ppois(y[tt], theta_cur[k])))#
				}#
			}#
			prob<- c(prod(mass[t, S_cur[t+1]-1])*(1-prod(P_cur[S_cur[t+1]-1])), mass[t, S_cur[t+1]]*P_cur[S_cur[t+1]])#
			prob<- prob/sum(prob)	# probability for pick from S_cur[t+1]-1:S_cur[t+1]#
			S_cur[t]<- sample((S_cur[t+1]-1):S_cur[t+1], 1, prob = prob)#
		}#
		else{#
			S_cur[t]<- 1	#
		}
if(S_cur[t+1] > 1){#
			mass[1, 1]<- 1#
			for(tt in 2:n){#
				for(k in (S_cur[t+1]-1):S_cur[t+1]){#
					mass[tt, k]<- 1/(1+eq6(tt, k-1, P_cur, mass)*prod(ppois(y[tt], theta_cur[k-1]))/(eq6(tt, k, P_cur, mass)*ppois(y[tt], theta_cur[k])))#
				}#
			}#
			prob<- c(prod(mass[t, S_cur[t+1]-1])*(1-prod(P_cur[S_cur[t+1]-1])), mass[t, S_cur[t+1]]*P_cur[S_cur[t+1]])#
			prob<- prob/sum(prob)	# probability for pick from S_cur[t+1]-1:S_cur[t+1]#
			S_cur[t]<- sample((S_cur[t+1]-1):S_cur[t+1], 1, prob = prob)#
		}#
		if(S_cur[t+1] == 1){#
			S_cur[t]<- 1	#
		}
S_cur[t+1]
mass
t
tt
mass<- array(0, c(n, m+1))#
		if(S_cur[t+1] > 1){#
			mass[1, 1]<- 1#
			for(tt in 2:n){#
				k<- S_cur[t+1]#
				mass[tt, k]<- 1/(1+eq6(tt, k-1, P_cur, mass)*ppois(y[tt], theta_cur[k-1])/(eq6(tt, k, P_cur, mass)*ppois(y[tt], theta_cur[k])))#
				mass[tt, k-1]<- 1-mass[tt, k]#
			}#
			prob<- c(prod(mass[t, S_cur[t+1]-1])*(1-prod(P_cur[S_cur[t+1]-1])), mass[t, S_cur[t+1]]*P_cur[S_cur[t+1]])#
			prob<- prob/sum(prob)	# probability for pick from S_cur[t+1]-1:S_cur[t+1]#
			S_cur[t]<- sample((S_cur[t+1]-1):S_cur[t+1], 1, prob = prob)#
		}#
		if(S_cur[t+1] == 1){#
			S_cur[t]<- 1	#
		}
mass
S_cur[n]<- m+1#
	for(t in (n-1):2){#
		mass<- array(0, c(n, m+1))#
		if(S_cur[t+1] > 1){#
			mass[1, 1]<- 1#
			for(tt in 2:n){#
				k<- S_cur[t+1]#
				mass[tt, k]<- 1/(1+eq6(tt, k-1, P_cur, mass)*ppois(y[tt], theta_cur[k-1])/(eq6(tt, k, P_cur, mass)*ppois(y[tt], theta_cur[k])))#
				mass[tt, k-1]<- 1-mass[tt, k]#
			}#
			prob<- c(prod(mass[t, S_cur[t+1]-1])*(1-prod(P_cur[S_cur[t+1]-1])), mass[t, S_cur[t+1]]*P_cur[S_cur[t+1]])#
			prob<- prob/sum(prob)	# probability for pick from S_cur[t+1]-1:S_cur[t+1]#
			S_cur[t]<- sample((S_cur[t+1]-1):S_cur[t+1], 1, prob = prob)#
		}#
		if(S_cur[t+1] == 1){#
			S_cur[t]<- 1	#
		}#
	}
S_cur
t
S_cur[t+1]
mass
initial setups ###
# hyper parameters#
a<- round(0.1*n/(m+1)-0.1)#
b<- 0.1#
#
# transition matrix P#
P<- array(0.5, c(1, m+1))#
P[1, m+1]<- 1#
#
# latent variable S#
S<- array(m+1, c(1, n))#
for(t in 1:(m+1)){#
	S[t]<- t#
}#
#
# model parameters theta#
theta<- array(n/(m+1), c(1, m+1))#
#
comb<- c(P[-c(m+1)], S[2:(n-1)], theta)	# all combined parameters exclude P[m+1] = 1 & S[1] = 1 & S[n] = m+1#
iter<- 0	# iteration counts#
thresh<- 5000	# threshold for stopping rule#
## mcmc simulation ###
while(1){#
	iter<- iter+1#
	P_cur<- P[iter, ]#
	theta_cur<- theta[iter, ]#
	S_cur<- S[iter, ]#
	# update S#
	S_cur[n]<- m+1#
	for(t in (n-1):2){#
		mass<- array(0, c(n, m+1))#
		if(S_cur[t+1] > 1){#
			mass[1, 1]<- 1#
			for(tt in 2:n){#
				k<- S_cur[t+1]#
				mass[tt, k]<- 1/(1+eq6(tt, k-1, P_cur, mass)*ppois(y[tt], theta_cur[k-1])/(eq6(tt, k, P_cur, mass)*ppois(y[tt], theta_cur[k])))#
				mass[tt, k-1]<- 1-mass[tt, k]#
			}#
			prob<- c(prod(mass[t, S_cur[t+1]-1])*(1-prod(P_cur[S_cur[t+1]-1])), mass[t, S_cur[t+1]]*P_cur[S_cur[t+1]])#
			prob<- prob/sum(prob)	# probability for pick from S_cur[t+1]-1:S_cur[t+1]#
			S_cur[t]<- sample((S_cur[t+1]-1):S_cur[t+1], 1, prob = prob)#
		}#
		if(S_cur[t+1] == 1){#
			S_cur[t]<- 1	#
		}#
	}#
	# update P#
	count<- table(S_cur)-1	#n_ii#
	for(i in 1:m){#
		x1<- rgamma(1, a+count[i], 1)#
		x2<- rgamma(1, b+1, 1)#
		P_cur[i]<- x1/(x1+x2)#
	}#
	# update theta#
	for(i in 1:(m+1)){#
		theta_cur[i]<- rgamma(1, m+1+sum(y[S_cur == i]), count[i]+2)#
	}#
	P<- rbind(P, P_cur)#
	S<- rbind(S, S_cur)#
	theta<- rbind(theta, theta_cur)#
	write.table(P, file = paste(m, "P.txt", sep=''))#
	write.table(S, file = paste(m, "S.txt", sep=''))#
	write.table(theta, file = paste(m, "theta.txt", sep=''))#
	# store all parameters together#
	comb_cur<- c(P_cur[-c(m+1)], S_cur[2:(n-1)], theta_cur)#
	comb<- rbind(comb, comb_cur)#
	# check stopping rule#
	if(iter > thresh){#
		comb_mcse<- mcse.mat(comb)[,2]#
		comb_sd<- apply(comb, 2, sd)#
		thresh<- thresh+1000#
		cond<- comb_mcse*1.96+1/iter < 0.02*comb_sd#
		write.table(cond, file = paste(m, "cond.txt", sep=''), append = T)#
		if(prod(cond)){#
			break#
		}#
	}#
}
